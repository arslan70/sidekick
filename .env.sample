# AWS Configuration (REQUIRED - Bedrock models run on AWS)
# You MUST have valid AWS credentials configured to use Bedrock LLMs
AWS_REGION=eu-central-1
BEDROCK_MODEL_ID=eu.amazon.nova-pro-v1:0

# Bedrock Guardrails Configuration (Optional)
# Set these to enable content filtering and safety guardrails
# BEDROCK_GUARDRAIL_ID=your-guardrail-id
# BEDROCK_GUARDRAIL_VERSION=1

# AWS Credentials (choose one method):
# Method 1: Environment variables (uncomment to use)
# AWS_ACCESS_KEY_ID=your-access-key-id
# AWS_SECRET_ACCESS_KEY=your-secret-access-key

# Method 2: AWS CLI profile (recommended)
# AWS_PROFILE=your-profile-name

# Method 3: Use ~/.aws/credentials file (default)
# Run: aws configure

# ============================================================================
# Automatic Data Source Detection
# ============================================================================
# The system automatically detects available credentials and uses real APIs
# when configured, falling back to static demo data when credentials are missing.
#
# Services that support real API integration:
# - JIRA/Confluence: Automatically uses real APIs when Atlassian OAuth is configured
# - Knowledge Base: Uses Bedrock KB when KNOWLEDGE_BASE_ID is set
#
# Services that use static demo data:
# - Calendar: Uses static data from configs/calendar_data.json
# - Email: Uses static data from configs/email_data.json
# - Incidents: Uses static data from configs/incident_data.json
#
# No mode flags needed - just configure the credentials for the services you want to use!

# Chainlit Configuration
CHAINLIT_HOST=localhost
CHAINLIT_PORT=8000

# Chainlit Authentication (Optional - for hackathon judges)
# Set CHAINLIT_AUTH_SECRET to enable password authentication
# Generate a secure secret: python -c "import secrets; print(secrets.token_urlsafe(32))"
# CHAINLIT_AUTH_SECRET=your-secure-secret-here
#
# Admin credentials (optional):
# ADMIN_USERNAME=admin
# ADMIN_PASSWORD=your-secure-admin-password

# ============================================================================
# HTTPS/SSL Configuration (Optional - for production deployment)
# ============================================================================
# Configure HTTPS with AWS Certificate Manager (ACM) for secure connections.
# This is REQUIRED for production deployments and OAuth integrations.
#
# Step 1: Request ACM Certificate
# - Go to AWS Certificate Manager in your region (eu-central-1)
# - Click "Request certificate" â†’ "Request a public certificate"
# - Enter your domain name (e.g., sidekick-ai.example.com)
# - Choose DNS validation (recommended) or Email validation
# - Add CNAME records to your DNS for validation
# - Wait for certificate status to become "Issued"
#
# Step 2: Configure Certificate ARN
# ACM_CERTIFICATE_ARN=arn:aws:acm:eu-central-1:123456789012:certificate/12345678-1234-1234-1234-123456789012
#
# Step 3: Configure Domain Name (optional)
# DOMAIN_NAME=sidekick-ai.example.com
#
# Step 4: Update OAuth Redirect URI
# After deployment, update ATLASSIAN_OAUTH_REDIRECT_URI to use HTTPS:
# ATLASSIAN_OAUTH_REDIRECT_URI=https://your-domain.com/oauth/callback
#
# Notes:
# - If ACM_CERTIFICATE_ARN is set, HTTPS will be enabled on port 443
# - HTTP (port 80) will automatically redirect to HTTPS (301 permanent)
# - If DOMAIN_NAME is set, it will be used for OAuth redirect URIs
# - Without certificate, the application will use HTTP only (development mode)
# - ACM certificates are FREE for use with AWS services (ALB, CloudFront, etc.)
# - Certificates auto-renew 60 days before expiration (DNS validation only)

# ============================================================================
# Knowledge Base Configuration (Optional)
# ============================================================================
# Set this to use AWS Bedrock Knowledge Base for semantic search
# If not set, the KB worker will not be available
# KNOWLEDGE_BASE_ID=your-knowledge-base-id

# ============================================================================
# Atlassian OAuth 2.0 Configuration (Optional - for real JIRA/Confluence APIs)
# ============================================================================
# When configured, the system automatically uses real Atlassian APIs.
# When not configured, static demo data is used automatically.
# Follow the setup guide in docs/atlassian-oauth-setup.md for detailed instructions.
#
# Quick Start:
# 1. Create an OAuth 2.0 app at https://developer.atlassian.com/console/myapps/
# 2. Configure required scopes (see below)
# 3. Set the callback URL to match your ATLASSIAN_OAUTH_REDIRECT_URI
# 4. Copy the Client ID and Client Secret to the variables below
# 5. Set up AWS AgentCore Identity for token storage
# 6. Validate configuration: python scripts/validate_config.py
#
# REQUIRED for real Atlassian APIs:
# ATLASSIAN_OAUTH_CLIENT_ID=your-oauth-client-id-here
# ATLASSIAN_OAUTH_CLIENT_SECRET=your-oauth-client-secret-here
# ATLASSIAN_OAUTH_REDIRECT_URI=https://your-app-domain.com/oauth/callback
#
# REQUIRED for token storage (AWS AgentCore Identity):
# AGENTCORE_IDENTITY_ARN=arn:aws:bedrock:region:account-id:agent/agent-id/identity/identity-id
#
# OPTIONAL (defaults provided):
# ATLASSIAN_OAUTH_SCOPES=read:jira-work,read:jira-user,read:confluence-content.all,read:confluence-space.summary,offline_access
# ATLASSIAN_DEMO_USER_ID=yetanotherarslan@gmail.com
#
# OPTIONAL (if you already know your Atlassian Cloud ID):
# ATLASSIAN_CLOUD_ID=your-atlassian-cloud-id
#
# Required OAuth Scopes:
# - read:jira-work: Read JIRA issues, projects, and work items
# - read:jira-user: Read user information from JIRA
# - read:confluence-content.all: Read Confluence pages and content
# - read:confluence-space.summary: Read Confluence space information
# - offline_access: Enable refresh token support (REQUIRED)
#
# Callback URL Configuration:
# - Development: http://localhost:8000/oauth/callback
# - Production: https://your-domain.com/oauth/callback (MUST use HTTPS)
#
# Validation:
# Run 'python scripts/validate_config.py' to check your configuration
